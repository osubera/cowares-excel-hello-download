'ssf-begin
';

'mdb
'  name;ssf_reader_primitive

'require
'  ;{00000201-0000-0010-8000-00AA006D2EA4} 2 1 Microsoft ActiveX Data Objects 2.1 Library
'  ;{420B2830-E718-11CF-893D-00A0C9054228} 1 0 Microsoft Scripting Runtime
'  ;{0002E157-0000-0000-C000-000000000046} 5 3 Microsoft Visual Basic for Applications Extensibility 5.3

'module
'  name;SsfReaderPrimitive
'{{{
Option Compare Database
Option Explicit

Dim Env As Scripting.Dictionary

Function GetMdbFileName() As String
    'GetMdbFileName = "C:\Users\Public\Documents\ssf.mdb"
    GetMdbFileName = "C:\tmp\ssf.mdb"
End Function

Function GetSsfFileName() As String
    'GetSsfFileName = "C:\Users\Public\Documents\ssf.txt"
    GetSsfFileName = "C:\tmp\ssf.txt"
End Function

Public Sub Reader()
    Dim fs As Scripting.FileSystemObject
    Dim Stream As Scripting.TextStream
    Dim App As Access.Application
    
    Set fs = New Scripting.FileSystemObject
    Set Stream = fs.OpenTextFile(GetSsfFileName, ForReading)
    Set App = GetObject(GetMdbFileName)
    App.Visible = True
    App.DoCmd.RunCommand acCmdDebugWindow
    
    InitializeEnv App
    ReadFrom Stream
    TerminateEnv
    
    App.DoCmd.RunCommand acCmdCompileAndSaveAllModules
    App.Quit acQuitSaveAll
    Stream.Close
    
    Set App = Nothing
    Set Stream = Nothing
    Set fs = Nothing
End Sub

Function ReadFrom(Stream As Scripting.TextStream) As String
    Dim Result As String
    Dim Line As String
    Dim FoldedLine As String
    Dim Escaping As Boolean
    Dim Block As Collection
    
    Result = ""
    FoldedLine = ""
    Escaping = False
    Set Block = New Collection
    
    ' though i hate these big tripple loops, still working in this small task
    Do Until Stream.AtEndOfStream
        Do
            If FoldedLine <> "" Then
                Block.Add FoldedLine
            End If
            
            Do
                If Stream.AtEndOfStream Then
                    Line = ""
                    If Escaping Then
                        Escaping = False
                    End If
                Else
                    Line = Stream.ReadLine
                End If
                
                If IsSsfEscapeBegin(Line) Then
                    Escaping = True
                    FoldedLine = ";"
                ElseIf IsSsfEscapeEnd(Line) Then
                    Escaping = False
                Else
                    If Escaping Then
                        FoldedLine = FoldedLine & Line & vbCrLf
                    ElseIf IsSsfLine(Line) Then
                        FoldedLine = RemoveSsfSign(Line)
                    Else
                        FoldedLine = ""
                    End If
                End If
            Loop While Escaping
        Loop While IsSsfLine(Line)
        
        If Block.Count > 0 Then
            Result = Result & ParseSsfBlock(Block)
            Do While Block.Count > 0
                Block.Remove 1
            Loop
        End If
    Loop
    
    Debug.Print Result
    Set Block = Nothing
End Function

Function IsSsfLine(Line As String) As Boolean
    IsSsfLine = (Left(Line, 1) = "'")
End Function

Function IsSsfEscapeBegin(Line As String) As Boolean
    IsSsfEscapeBegin = (Line = "'{{{")
End Function

Function IsSsfEscapeEnd(Line As String) As Boolean
    IsSsfEscapeEnd = (Line = "'}}}")
End Function

Function RemoveSsfSign(Line As String) As String
    Dim Result As String
    Dim StartAt As Long
    Dim EndAt As Long
    
    RemoveSsfSign = ""
    If Left(Line, 1) <> "'" Then Exit Function
    
    StartAt = 2
    EndAt = Len(Line)
    Do
        If StartAt > EndAt Then Exit Function
        If Mid(Line, StartAt, 1) <> " " And Mid(Line, StartAt, 1) <> vbTab Then Exit Do
        StartAt = StartAt + 1
    Loop
    
    RemoveSsfSign = Right(Line, EndAt - StartAt + 1)
End Function

Function ParseSsfBlock(Block As Collection) As String
    Dim Result As String
    Dim SsfKey As String
    
    SsfKey = Block(1)
    Block.Remove 1
    ' these are keys supported
    Select Case SsfKey
    Case "class"
        Result = ParseSsfModule(Block, vbext_ct_ClassModule)
    Case "code"
        Result = ParseSsfModule(Block, vbext_ct_Document)
    Case "module"
        Result = ParseSsfModule(Block, vbext_ct_StdModule)
    Case "require"
        Result = ParseSsfRequire(Block)
    End Select
    
    ParseSsfBlock = Result
End Function

Function InitializeEnv(App As Access.Application) As Object
    Set Env = New Scripting.Dictionary
    Set Env("mdb") = App
    Set Env("module") = Nothing
    Env("chicken") = "NobodyCallsMeChicken_jk"  ' its an unexpected name
    Env("copyof") = "COPY_ooop_"
    Set InitializeEnv = Env
End Function

Function TerminateEnv() As Object
    Env.RemoveAll
    Set Env = Nothing
    Set TerminateEnv = Nothing
End Function

Function DivideSsfLine(Line As Variant, ByRef TheName As String, ByRef TheValue As String) As String
    ' return results as TheName, TheValue and the function return value
    Dim x As Variant
    x = DivideLine(Line, ";", 2)
    TheName = x(0)
    TheValue = x(1)
    DivideSsfLine = TheName
End Function

Function DivideName(Line As Variant, ByRef Name As String, ByRef CodeName As String) As String
    Dim x As Variant
    x = DivideLine(Line, "/", 2)
    Name = x(0)
    CodeName = IIf(x(1) = "", x(0), x(1))
    ' we may have to set another rule on workbook
    DivideName = CodeName
End Function

Function DivideLine(Line As Variant, Delimiter As String, Number As Long) As Variant
    Dim x As Variant
    Dim y() As Variant
    Dim i As Long
    
    x = Split(Line, Delimiter, Number)
    If UBound(x) = Number - 1 Then
        DivideLine = x
    Else
        ReDim y(0 To Number - 1)
        For i = 0 To UBound(x)
            y(i) = x(i)
        Next
        DivideLine = y
    End If
End Function

Function SwitchModule(Name As String, ComponentType As vbext_ComponentType) As VBComponent
    ' 1. add a new component unless names are given
    ' 2. may copy ThisWorkbook by the condition of Env("copythisworkbook")
    ' 3. search existing component for the given name
    ' 4. add a new component if above 3 fails
    ' 5. add only type of module
    
    Dim MdbModules As Modules
    
    Dim Project As VBProject
    Dim Comp As VBComponent
    Dim NewName As String
    Dim NewType As vbext_ComponentType
    Dim StdOrClass As Boolean
    
    Set Project = Env("mdb").VBE.ActiveVBProject
    On Error GoTo AddNew
    
    ' we only add classes and stdmodules
    StdOrClass = (ComponentType = vbext_ct_StdModule Or ComponentType = vbext_ct_ClassModule)
    NewType = IIf(StdOrClass, ComponentType, vbext_ct_StdModule)
    NewName = ""
    
    ' rule#1 no names
    If Name = "" Then GoTo AddNew
    
    ' rule#5 add modules instead of documents
    NewName = IIf(StdOrClass, Name, Env("copyof") & Name)
    
    ' rule#2 ThisDocument
    'If Name = "ThisDocument" And Env("copythisdocument") Then GoTo AddNew
    
    ' rule#3 search
    Set Comp = Project.VBComponents(Name)
    If Comp.Type <> ComponentType Then
        NewName = ""
        GoTo AddNew
    End If
    
    GoTo Done
    
    ' rule#4 add
AddNew:
    If Err.Number > 0 Then
        'Debug.Print Names & "/" & Err.Number & Err.Description
        Resume AddNew2
    End If
AddNew2:
    On Error Resume Next
    
    Set Comp = Project.VBComponents.Add(NewType)
    If NewName <> "" Then Comp.Name = NewName
    If Comp Is Nothing Then
        Debug.Print Name & "*" & Err.Number & Err.Description
        Set SwitchModule = Env("module")
        Exit Function
    End If
    
Done:
    Set Env("module") = Comp
    Set SwitchModule = Comp
End Function

Function ParseSsfModule(Block As Collection, Optional ComponentType As vbext_ComponentType = vbext_ct_StdModule) As String
    Dim Result As String
    Dim Line As Variant
    Dim TheName As String
    Dim TheValue As String
    Dim Source As String
    
    Result = ""
    Source = ""
    
    On Error Resume Next
    For Each Line In Block
        Select Case DivideSsfLine(Line, TheName, TheValue)
        Case "name"
            SwitchModule TheValue, ComponentType
            Result = Result & "new module " & Env("module").Name & vbCrLf
        Case ""
            Source = Source & TheValue
        End Select
        If Err.Number > 0 Then
            Result = Result & Err.Number & "; " & Err.Description & "(" & TheName & "," & TheValue & ")" & vbCrLf
            Err.Clear
        End If
    Next
    
    If Source <> "" And Not Env("module") Is Nothing Then
        With Env("module").CodeModule
            .DeleteLines 1, .CountOfLines
            .InsertLines 1, Source
        End With
    End If
    
    ParseSsfModule = Result
End Function

Function ParseSsfRequire(Block As Collection) As String
    Dim Result As String
    Dim Line As Variant
    Dim TheName As String
    Dim TheValue As String
    Dim Project As VBProject
    Dim GuidMajorMinorDescription As Variant
    
    Result = ""
    Set Project = Env("mdb").VBE.ActiveVBProject
    Result = Result & "require" & vbCrLf
    
    On Error Resume Next
    For Each Line In Block
        Select Case DivideSsfLine(Line, TheName, TheValue)
        Case ""
            GuidMajorMinorDescription = DivideLine(TheValue, " ", 4)
            Result = Result & GuidMajorMinorDescription(3) & vbCrLf
            Project.References.AddFromGuid GuidMajorMinorDescription(0), GuidMajorMinorDescription(1), GuidMajorMinorDescription(2)
        End Select
        If Err.Number > 0 Then
            Result = Result & Err.Number & "; " & Err.Description & "(" & TheName & "," & TheValue & ")" & vbCrLf
            Err.Clear
        End If
    Next
    
    ParseSsfRequire = Result
End Function
'}}}

'ssf-end

