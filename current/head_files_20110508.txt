'ssf-begin
';

'workbook
'   name;head_files_2k.xls/F3HeadFiles

'book-identity
'  title;ちょっと見て判定
'  description;ファイルの先頭を見て、テキストを判定する

'require
'       ;{00000205-0000-0010-8000-00AA006D2EA4} 2 5 Microsoft ActiveX Data Objects 2.5 Library

'cells-name
'       ;=ちょっと見て判定!R15C1
'       ;ちょっと見て判定!_ButtonCaption
'       ;=ちょっと見て判定!R3C2
'       ;ちょっと見て判定!_Comment
'       ;=ちょっと見て判定!R6C2
'       ;ちょっと見て判定!_Contributor
'       ;=ちょっと見て判定!R4C2
'       ;ちょっと見て判定!_Copyright
'       ;=ちょっと見て判定!R5C2
'       ;ちょっと見て判定!_License
'       ;=ちょっと見て判定!R2C2
'       ;ちょっと見て判定!_LocalComment
'       ;=ちょっと見て判定!R1C2
'       ;ちょっと見て判定!_PublicName
'       ;=ちょっと見て判定!R7C2
'       ;ちょっと見て判定!_Since
'       ;=ちょっと見て判定!R10C2
'       ;ちょっと見て判定!_Tag
'       ;=ちょっと見て判定!R9C2
'       ;ちょっと見て判定!_Timestamp
'       ;=ちょっと見て判定!R8C2
'       ;ちょっと見て判定!_Url

'worksheet
'   name;ちょっと見て判定/BaumMain

'cells-formula
'  address;A1:B10
'         ;名称
'         ;head_files
'         ;コメント
'         ;ファイルの先頭を見て、テキストを判定する
'         ;comment
'         ;read file headings and judge types
'         ;著作権
'         ;="Copyright (C) " &R[3]C & "-" & YEAR(R[5]C) & " " & R[2]C
'         ;ライセンス
'         ;自律, 自由, 公正, http://cowares.nobody.jp
'         ;作者
'         ;Tomizono - mocvba.com
'         ;初版
'         ;2011
'         ;配布元
'         ;http://cowares.blogspot.com/search/label/baum
'         ;更新
'         ;40671.2916666667
'         ;keyword
'         ;vba,excel,file
'  address;A13:J13
'         ;ボタンの表示
'         ;ボタンの機能
'         ;Tag
'         ;Parameter
'         ;ControlType
'         ;Style
'         ;Width
'         ;Group
'         ;Action
'         ;Initialize ..
'  address;A15:J18
'         ;判定実行
'         ;アクティブなファイル一覧表でファイル判定を実施する。
'         ;head
'     skip;1
'         ;1
'         ;2
'     skip;1
'         ;1
'     skip;2
'         ;表示バイト数
'         ;表示する先頭バイト数
'         ;bytes_show
'     skip;1
'         ;4
'     skip;2
'         ;1
'     skip;1
'         ;128
'         ;判定バイト数
'         ;文字コード等の判定に使うバイト数
'         ;bytes_judge
'     skip;1
'         ;4
'     skip;4
'         ;4096
'         ;=R1C2 & " について"
'         ;情報シートを表示する。
'         ;about
'     skip;1
'         ;1
'         ;2
'     skip;1
'         ;1
'  address;B23
'         ;エクセルブック、ワード、アクセスのカスタムメイドやウェブシステムの開発などをリーズナブルな価格で承っております。
'  address;C26:G32
'         ;導入する利点
'     skip;1
'         ;発注について
'     skip;2
'         ;事業者で
'     skip;1
'         ;発注から公開まで
'     skip;1
'         ;プライバシー
'         ;大企業で
'     skip;1
'         ;料金
'     skip;1
'         ;取引上の注意
'         ;公益法人で
'     skip;1
'         ;公開（納品）
'     skip;2
'         ;個人で
'     skip;1
'         ;基本的なルール
'     skip;2
'         ;IT企業で
'     skip;1
'         ;細かいルール
'     skip;4
'         ;なぜ無料ソフトを買う？
'  address;C34
'         ;すぐに注文する
'  address;B38
'         ;簡単な指示、安い料金、早い結果
'  address;B40
'         ;料金 - コ・ウェア・ライセンスのシステム開発
'  address;B42
'         ;基本料金表
'  address;B44:B45
'         ;３つのサイズから選ぶだけで簡単。
'         ;前払いが原則。
'  address;B47:D49
'         ;Sサイズ
'         ;1,000円
'         ;（税込 1,050円）
'         ;Mサイズ
'         ;10,000円
'         ;（税込 10,500円）
'         ;Lサイズ
'         ;100,000円
'         ;（税込 105,000円）
'  address;B51
'         ;サイズとは
'  address;B53
'         ;開発にかかる時間や難易度を、おおまかに３つのサイズで分類します。
'  address;B55
'         ;Sサイズ
'  address;B57:C61
'         ;1. 小型、 Small 、 partial
'     skip;1
'         ;2. ちょっとしたコード素片や、ワークシートの一部分など。
'     skip;1
'         ;3. 手に負えない、書き方のわからないコードだけを知りたいときに。
'     skip;1
'         ;4. 例）数行の VBA コード。次のリンク先の１つ目のコード
'     skip;2
'         ;http://code.google.com/p/cowares-excel-hello/wiki/hello_key_value
'  address;B63
'         ;Mサイズ
'  address;B65:C69
'         ;1. 中型、 Medium 、 functional
'     skip;1
'         ;2. 完成した関数やワークシート。
'     skip;1
'         ;3. 単一の機能が、とりあえず動くレベルのものが欲しいときに。
'     skip;1
'         ;4. 例）マクロを実行すれば一つの動作を行う VBA コード。
'     skip;2
'         ;http://code.google.com/p/cowares-excel-hello/wiki/annual_list
'  address;B71
'         ;Lサイズ
'  address;B73:B76
'         ;1. 大型、 Large 、 integrated
'         ;2. 実用的なアプリケーション。
'         ;3. 複数の機能や、条件設定による動作切り替えや画面遷移も含むときに。
'         ;4. 例）ユーザーインターフェースを持ち、ツールとして利用できる。
'  address;B80
'         ;公開 - コ・ウェア・ライセンスのシステム開発
'  address;B82
'         ;公開が納品です
'  address;B84:B91
'         ;所定の公開場所に成果物をアップロードする方法を採ります。
'         ;仕様を決める段階から公開URLを使います。
'         ;公開のタイミングで連絡はしますが、ファイル添付などはしません。
'         ;公開先からのセルフダウンロードでお願いします。
'         ;本人はもちろん、同僚や友達、その他大勢の人がダウンロードして利用できます。
'         ;マクロコードをテキストで公開するので、セキュリティの強い職場で、マクロ付きブックのダウンロード規制がある環境でも心配ありません。
'         ;公開後のコード修正等、追加情報も当該URLから派生していきます。
'         ;URLは永久に変わらないものではありません。
'  address;B93
'         ;主な公開先URL
'  address;B95:B96
'         ;http://cowares.blogspot.com
'         ;http://code.google.com/p/cowares-excel-hello/
'  address;B100
'         ;なぜ無料ソフトを買うのか？ - コ・ウェア・ライセンスのシステム開発
'  address;B102
'         ;そのお金は何に払っているのでしょうか
'  address;B104:G104
'         ;無料のもの
'     skip;1
'         ;買うもの
'     skip;2
'         ;買わないもの
'  address;B106:G109
'         ;ライセンス
'     skip;1
'         ;エンジニアの働き
'     skip;2
'         ;保証
'         ;コピー
'     skip;1
'         ;世界への貢献
'     skip;2
'         ;役員の働き
'     skip;5
'         ;事務員の働き
'     skip;5
'         ;営業スマイル
'  address;C111:D112
'     skip;1
'         ;コ・ウェアの料金
'         ;通常のシステム開発で払うお金
'  address;C116
'         ;すぐに注文する

'cells-numberformat
'  address;B9
'         ;m/d/yyyy h:mm

'cells-width
'   unit;pt
'  address;B1
'         ;96.75

'cells-height
'   unit;pt
'  address;A23
'         ;14.25
'  address;A34
'         ;24.75
'  address;A40
'         ;21
'  address;A42
'         ;14.25
'  address;A46:A47
'   repeat;2
'         ;14.25
'  address;A49:A51
'   repeat;3
'         ;14.25
'  address;A80
'         ;21
'  address;A82
'         ;14.25
'  address;A93
'         ;14.25
'  address;A100
'         ;21
'  address;A102
'         ;14.25
'  address;A116
'         ;24.75

'cells-background-color
'  address;A23:M23
'   repeat;13
'         ;#FF6600
'  address;C26:H26
'   repeat;2
'         ;#FFCC99
'   repeat;4
'         ;#CCFFCC
'  address;C34:F34
'   repeat;4
'         ;#99CC00
'  address;B40:L40
'   repeat;11
'         ;#333399
'  address;B47:B49
'         ;#CCFFCC
'         ;#FFFF99
'         ;#FFCC99
'  address;B55
'         ;#CCFFCC
'  address;B63
'         ;#FFFF99
'  address;B71
'         ;#FFCC99
'  address;B80:L80
'   repeat;11
'         ;#333399
'  address;B100:L100
'   repeat;11
'         ;#333399
'  address;B104:H104
'   repeat;2
'         ;#FF99CC
'   repeat;2
'         ;#CCFFCC
'   repeat;3
'         ;#FF99CC
'  address;B111:H112
'     skip;2
'   repeat;2
'         ;#00FF00
'     skip;3
'   repeat;7
'         ;#FF00FF
'  address;C116:F116
'   repeat;4
'         ;#99CC00

'cells-color
'  address;C27:G32
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;1
'   repeat;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;1
'   repeat;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;4
'         ;#0000FF
'  address;C34:F34
'   repeat;4
'         ;#0000FF
'  address;B38
'         ;#FF00FF
'  address;B40:L40
'   repeat;11
'         ;#FFCC00
'  address;C60:J61
'     skip;2
'   repeat;14
'         ;#0000FF
'  address;C69:H69
'   repeat;6
'         ;#0000FF
'  address;B80:L80
'   repeat;11
'         ;#FFCC00
'  address;B95:B96
'   repeat;2
'         ;#0000FF
'  address;B100:L100
'   repeat;11
'         ;#FFCC00
'  address;C116:F116
'   repeat;4
'         ;#0000FF

'cells-font-size
'  address;B23
'         ;12
'  address;C34:F34
'   repeat;4
'         ;12
'  address;B40
'         ;18
'  address;B42
'         ;12
'  address;B51
'         ;12
'  address;B80
'         ;18
'  address;B82
'         ;12
'  address;B93
'         ;12
'  address;B100
'         ;18
'  address;B102
'         ;12
'  address;C116:F116
'   repeat;4
'         ;12

'cells-font-bold
'  address;B23
'         ;yes
'  address;C34:F34
'   repeat;4
'         ;yes
'  address;B40
'         ;yes
'  address;B42
'         ;yes
'  address;B47:B49
'   repeat;3
'         ;yes
'  address;B51
'         ;yes
'  address;B55
'         ;yes
'  address;B63
'         ;yes
'  address;B71
'         ;yes
'  address;B80
'         ;yes
'  address;B82
'         ;yes
'  address;B93
'         ;yes
'  address;B100
'         ;yes
'  address;B102
'         ;yes
'  address;B104:G104
'         ;yes
'     skip;1
'   repeat;2
'         ;yes
'     skip;1
'         ;yes
'  address;C116:F116
'   repeat;4
'         ;yes

'cells-h-align
'  address;C34:F34
'   repeat;4
'         ;center
'  address;C47:C49
'   repeat;3
'         ;right
'  address;C60:J61
'     skip;2
'   repeat;6
'         ;center
'   repeat;7
'         ;left
'         ;center
'  address;C69:H69
'   repeat;6
'         ;left
'  address;D104:E104
'   repeat;2
'         ;center
'  address;D111:E111
'   repeat;2
'         ;center
'  address;C116:F116
'   repeat;4
'         ;center

'cells-v-align
'  address;C34:F34
'   repeat;4
'         ;center
'  address;B42:J76
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;4
'         ;center
'     skip;1
'   repeat;6
'         ;center
'     skip;1
'   repeat;14
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;4
'   repeat;5
'         ;center
'     skip;4
'   repeat;6
'         ;center
'     skip;2
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'  address;B80:G96
'   repeat;102
'         ;center
'  address;B100:B102
'   repeat;3
'         ;center
'  address;B104:G112
'   repeat;11
'         ;center
'     skip;1
'   repeat;28
'         ;center
'     skip;2
'   repeat;4
'         ;center
'     skip;2
'   repeat;4
'         ;center
'  address;C116:F116
'   repeat;4
'         ;center

'class
'   name;ToolBarV2
'{{{
Option Explicit

' Generate an application toolbar

Private MyBar As Office.CommandBar
Private MyName As String
Private MyApp As Application


'=== main procedures helper begin ===


' this will called by pressing a button
Friend Sub BarMain(Optional oWho As Object = Nothing)
    Dim oAC As Object   ' this is the button itself pressed
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    ' switch to a main menu procedure
    Main oAC, SomebodyOrMe(oWho)
    Set oAC = Nothing
End Sub

' main menu procedure. if you delete this, a public Main in Standard Module will be called, maybe.
Private Sub Main(oAC As Object, Optional oWho As Object = Nothing)
    ' use a button tag to switch a procedure to be called as "Menu_xx"
    CallByName SomebodyOrMe(oWho), "Menu_" & oAC.Tag, VbMethod, oAC
End Sub

Public Sub Menu_about(oAC As Object)
    MsgBox TypeName(Me), vbOKOnly, "Sample of procedure called by the Main"
End Sub

Friend Sub OnButtonToggle()
    Dim oAC As Object   ' toggle this button
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    
    ButtonSwitchToggle oAC
    Set oAC = Nothing
End Sub

Private Function SomebodyOrMe(oWho As Object) As Object
    If oWho Is Nothing Then
        Set SomebodyOrMe = Me
    Else
        Set SomebodyOrMe = oWho
    End If
End Function


'=== main procedures helper end ===
'=== event procedures begin ===


Private Sub Class_Initialize()
    Set MyApp = Application
    MyName = CStr(Timer)    ' random name, maybe uniq
End Sub

Private Sub Class_Terminate()
    Set MyApp = Nothing
End Sub


'=== event procedures end ===
'=== construction and destruction begin ===


Public Sub NewBar(ParamArray Addins() As Variant)
    DelBar
    Set MyBar = CreateBar(MyApp, MyName)
    AddAddins MyBar, CVar(Addins)
    ShowBar MyBar
End Sub

Public Sub DelBar()
    DeleteBar MyBar
    Set MyBar = Nothing
End Sub

Public Sub SetApplication(oApp As Application)
    Set MyApp = oApp
End Sub

Public Sub SetName(NewName As String)
    MyName = NewName
End Sub

Public Property Get Bar() As Office.CommandBar
    Set Bar = MyBar
End Property


'=== construction and destruction end ===
'=== bar generator begin ===


Public Function CreateBar(oApp As Application, BarName As String) As Office.CommandBar
    RemoveExistingBar oApp, BarName
    Set CreateBar = oApp.CommandBars.Add(Name:=BarName, Temporary:=True)
End Function

Public Sub RemoveExistingBar(oApp As Application, BarName As String)
    On Error Resume Next
    oApp.CommandBars(BarName).Delete
End Sub

Public Sub DeleteBar(Bar As Object)
    On Error Resume Next
    Bar.Delete
End Sub

Public Sub ShowBar(Bar As Object, Optional Position As Long = msoBarTop, Optional Height As Long = 0)
    Bar.Visible = True
    Bar.Position = Position
    If Height > 0 Then Bar.Height = Bar.Height * Height
End Sub


'=== bar generator end ===
'=== handle addins begin ===


Public Function WithAddins(ParamArray Addins() As Variant) As Long
    WithAddins = AddAddins(MyBar, CVar(Addins))
End Function

Public Function AddAddins(Bar As Object, Addins As Variant) As Long
    Dim Addin As Variant
    Dim LastButtonIndex As Long
    
    For Each Addin In Addins
        LastButtonIndex = AddButtons(Bar, Addin.ButtonData, Addin.ButtonParent)
    Next
    
    AddAddins = LastButtonIndex
End Function


'=== handle addins end ===
'=== button generator begin ===


Public Function AddButtons(Bar As Object, Data As Variant, Parent As Variant) As Long
    Dim LastButtonIndex As Long
    Dim SingleData As Variant
    
    For Each SingleData In Data
        LastButtonIndex = Add(Bar, MakeAButtonData(SingleData, Parent))
    Next
    
    AddButtons = LastButtonIndex
End Function

Public Function Add(Bar As Object, Data As Variant) As Long
    Dim ButtonA As CommandBarControl
    
    Set ButtonA = Bar.Controls.Add(Type:=ButtonControlType(Data), Temporary:=True)
    With ButtonA
        Select Case ButtonControlType(Data)
        Case msoControlEdit                         '2      ' textbox
        Case msoControlDropdown, msoControlComboBox '3, 4   ' list and combo
            SetButtonItems ButtonA, Data
            SetButtonStyle ButtonA, Data
        Case msoControlPopup                        '10     ' popup
            SetButtonPopup ButtonA, Data
        Case msoControlButton                       '1      ' Button
            SetButtonStyle ButtonA, Data
            SetButtonState ButtonA, Data
        End Select
        SetButtonWidth ButtonA, Data
        SetButtonGroup ButtonA, Data
        .OnAction = ButtonAction(Data)
        .Caption = ButtonCaption(Data)
        .TooltipText = ButtonDescription(Data)
        .Tag = ButtonTag(Data)
        .Parameter = ButtonParameter(Data)
    End With
    
    Add = ButtonA.Index
    Set ButtonA = Nothing
End Function

Public Sub Remove(Bar As Object, Items As Variant)
    On Error Resume Next
    Dim Item As Variant
    
    If IsArray(Item) Then
        For Each Item In Items
            Remove Bar, Item
        Next
    Else
        Bar.Controls(Item).Delete
    End If
End Sub


'=== button generator end ===
'=== button data structure begin ===


' generator / selector

' Data(): Array of button data
' Parent(): Array of button parent information (bar and properties)
'           Parent(0) is reserved for addin key


Public Function MakeAButtonData(Data As Variant, Parent As Variant) As Variant
    MakeAButtonData = Array(NormalizeArray(Data), Parent)
End Function

Public Function DataAButtonData(AButtonData As Variant) As Variant
    On Error Resume Next
    DataAButtonData = AButtonData(0)
End Function

Public Function ParentAButtonData(AButtonData As Variant) As Variant
    On Error Resume Next
    ParentAButtonData = AButtonData(1)
End Function

Public Function KeyAButtonData(AButtonData As Variant) As String
    On Error Resume Next
    KeyAButtonData = ParentAButtonData(AButtonData)(0)
End Function

Public Function ItemAButtonData(AButtonData As Variant, ByVal Item As Long, _
            Optional FallBack As Variant = Empty) As Variant
    On Error Resume Next
    Dim out As Variant
    
    out = DataAButtonData(AButtonData)(Item)
    If IsEmpty(out) Then out = FallBack
    
    ItemAButtonData = out
End Function


'=== button data structure end ===
'=== button data struncture detail begin ===


Public Function ButtonCaption(Data As Variant) As String
    ButtonCaption = ItemAButtonData(Data, 0)
End Function

Public Function ButtonDescription(Data As Variant) As String
    ButtonDescription = ItemAButtonData(Data, 1)
End Function

Public Function ButtonTag(Data As Variant) As String
    ButtonTag = ItemAButtonData(Data, 2, ButtonCaption(Data))
End Function

Public Function ButtonParameter(Data As Variant) As String
    ButtonParameter = ItemAButtonData(Data, 3)
End Function

Public Function ButtonControlType(Data As Variant) As Long
    'MsoControlType
    On Error Resume Next
    ButtonControlType = Val(ItemAButtonData(Data, 4, msoControlButton))
End Function

Public Function ButtonStyle(Data As Variant) As Long
    'MsoButtonStyle
    On Error Resume Next
    ButtonStyle = Val(ItemAButtonData(Data, 5, msoButtonCaption))
End Function

Public Function ButtonWidth(Data As Variant) As Long
    ' we use 45 units here
    On Error Resume Next
    Const UnitWidth = 45
    ButtonWidth = Val(ItemAButtonData(Data, 6)) * UnitWidth
End Function

Public Function ButtonGroup(Data As Variant) As Boolean
    ' put group line on its left
    ButtonGroup = Not IsEmpty(ItemAButtonData(Data, 7))
End Function

Public Function ButtonAction(Data As Variant) As String
    On Error Resume Next
    ' Standard Method Name to be kicked with the button
    Const BarMain = "BarMain"
    Dim FullName As String
    
    If KeyAButtonData(Data) = "" Then
        FullName = BarMain
    Else
        FullName = KeyAButtonData(Data) & "." & BarMain
    End If
    
    ButtonAction = ItemAButtonData(Data, 8, FullName)
End Function

Public Function ButtonItems(Data As Variant) As Variant
    Dim pan As Variant
    Dim i As Long
    
    On Error GoTo DONE
    pan = Empty
    i = 9
    
    Do Until IsEmpty(ItemAButtonData(Data, i))
        pan = Array(ItemAButtonData(Data, i), pan)
        i = i + 1
    Loop
    
DONE:
    ButtonItems = pan
End Function


'=== button data struncture detail end ===
'=== button tools for data begin ===


Public Sub SetButtonWidth(ButtonA As CommandBarControl, Data As Variant)
    If ButtonWidth(Data) > 0 Then ButtonA.Width = ButtonWidth(Data)
End Sub

Public Sub SetButtonStyle(ButtonA As Object, Data As Variant)
    On Error Resume Next
    ' Each Button does not accept each style, but we won't check them.
    If ButtonStyle(Data) <> 0 Then ButtonA.Style = ButtonStyle(Data)
End Sub

Public Sub SetButtonGroup(ButtonA As CommandBarControl, Data As Variant)
    If ButtonGroup(Data) Then ButtonA.BeginGroup = True
End Sub

Public Sub SetButtonItems(ButtonA As Object, Data As Variant)
    Dim pan As Variant
    Dim HasItem As Boolean
    
    pan = ButtonItems(Data)
    HasItem = False
    
    Do Until IsEmpty(pan)
        ButtonA.AddItem pan(0), 1
        pan = pan(1)
        HasItem = True
    Loop
    If HasItem Then ButtonA.ListIndex = 1
End Sub

Public Sub SetButtonPopup(ButtonA As CommandBarControl, Data As Variant)
    Dim MyChild As Variant
    
    MyChild = StackToArray(ButtonItems(Data))
    If UBound(MyChild) >= 0 Then Add ButtonA, MyChild
End Sub

Public Sub SetButtonState(ButtonA As Object, Data As Variant)
    If Not IsEmpty(ButtonItems(Data)) Then ButtonA.State = msoButtonDown
End Sub


'=== button tools for data end ===
'=== button tools for control object begin ===


Public Sub ComboAddHistory(oAC As Object, Optional AtBottom As Boolean = False)
    If oAC.ListIndex > 0 Then Exit Sub
    
    If AtBottom Then
        oAC.AddItem oAC.Text
        oAC.ListIndex = oAC.ListCount
    Else
        oAC.AddItem oAC.Text, 1
        oAC.ListIndex = 1
    End If
End Sub

Public Sub ListAddHistory(oAC As Object, Text As String, Optional AtBottom As Boolean = False)
    If AtBottom Then
        oAC.AddItem Text
        oAC.ListIndex = oAC.ListCount
    Else
        oAC.AddItem Text, 1
        oAC.ListIndex = 1
    End If
End Sub

Public Function ListFindIndex(oAC As Object, Text As String) As Long
    Dim i As Long
    For i = 1 To oAC.ListCount
        If oAC.List(i) = Text Then
            ListFindIndex = i
            Exit Function
        End If
    Next
    ListFindIndex = 0
End Function

Public Function ControlText(oAC As Object) As String
    ControlText = oAC.Text
End Function

Public Sub ButtonSwitchOn(oAC As Object)
    oAC.State = msoButtonDown
End Sub

Public Sub ButtonSwitchOff(oAC As Object)
    oAC.State = msoButtonUp
End Sub

Public Function ButtonSwitchToggle(oAC As Object) As Boolean
    ButtonSwitchToggle = (Not IsButtonStateOn(oAC))
    If ButtonSwitchToggle Then
        ButtonSwitchOn oAC
    Else
        ButtonSwitchOff oAC
    End If
End Function

Public Function IsButtonStateOn(oAC As Object) As Boolean
    IsButtonStateOn = (oAC.State = msoButtonDown)
End Function

Public Function ButtonFindByTag(oAC As Object, Tag As Variant) As CommandBarControl
    If oAC Is Nothing Then Exit Function
    If TypeName(oAC) = "CommandBar" Then
        Set ButtonFindByTag = oAC.FindControl(Tag:=Tag)
    Else
        Set ButtonFindByTag = oAC.Parent.FindControl(Tag:=Tag)
    End If
End Function


'=== button tools for control object end ===
'=== button tools for mybar begin ===


Public Function GetButton(TagOrIndex As Variant) As Office.CommandBarControl
    On Error Resume Next
    Select Case TypeName(TagOrIndex)
    Case "Long", "Integer", "Byte", "Double", "Single"
        Set GetButton = MyBar.Controls(TagOrIndex)
    Case Else
        Set GetButton = ButtonFindByTag(MyBar, TagOrIndex)
    End Select
End Function

Public Function GetControlText(TagOrIndex As Variant) As String
    Dim out As String
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    Select Case oAC.Type
    Case msoControlEdit, msoControlDropdown, msoControlComboBox
        out = oAC.Text
    Case Else   ' msoControlButton, msoControlPopup
        out = oAC.Caption
    End Select
    
    Set oAC = Nothing
    GetControlText = out
End Function

Public Function SetControlText(TagOrIndex As Variant, ByVal Text As String) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    Dim Index As Long
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then
        out = False
    Else
        Select Case oAC.Type
        Case msoControlEdit
            oAC.Text = Text
        Case msoControlDropdown
            Index = ListFindIndex(oAC, Text)
            If Index = 0 Then
                ListAddHistory oAC, Text
            Else
                oAC.ListIndex = Index
            End If
        Case msoControlComboBox
            Index = ListFindIndex(oAC, Text)
            If Index = 0 Then
                oAC.Text = Text
                ComboAddHistory oAC
            Else
                oAC.ListIndex = Index
            End If
        Case Else
            oAC.Caption = Text
        End Select
        Set oAC = Nothing
        out = True
    End If
    
    SetControlText = out
End Function

Public Function GetControlState(TagOrIndex As Variant) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Type = msoControlButton Then
        ' return True when the button is pushed down
        out = IsButtonStateOn(oAC)
    End If
    
    Set oAC = Nothing
    GetControlState = out
End Function

Public Function SetControlState(TagOrIndex As Variant, ByVal State As Boolean) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Type = msoControlButton Then
        If IsButtonStateOn(oAC) <> State Then
            If State Then
                ButtonSwitchOn oAC
            Else
                ButtonSwitchOff oAC
            End If
            ' return True when the status is strictly changed
            out = True
        End If
    End If
    
    Set oAC = Nothing
    SetControlState = out
End Function

Public Function GetControlVisible(TagOrIndex As Variant) As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    GetControlVisible = oAC.Visible
End Function

Public Function SetControlVisible(TagOrIndex As Variant, ByVal Visible As Boolean) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Visible <> Visible Then
        oAC.Visible = Visible
        ' return True when the visible is strictly changed
        out = True
    End If
    
    SetControlVisible = out
End Function

Public Function IncControlWidth(TagOrIndex As Variant, ByVal Width As Long) As Long
    Dim out As Long
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    On Error Resume Next
    oAC.Width = oAC.Width + Width
    ' return the width accepted (tips: setting 0 to width makes it becomes default)
    out = oAC.Width
    
    IncControlWidth = out
End Function


'=== button tools for mybar end ===
'=== helper functions begin ===


Public Function NormalizeArray(x As Variant) As Variant
    On Error Resume Next
    Dim out() As Variant
    Dim i As Long
    Dim L1 As Long
    Dim L2 As Long
    Dim U1 As Long
    Dim U2 As Long
    
    L1 = 0
    L2 = 0
    U1 = -1
    U2 = -1
    
    L1 = LBound(x)
    L2 = LBound(x, 2)   ' error unless 2 dimensions
    U1 = UBound(x)
    U2 = UBound(x, 2)   ' error unless 2 dimensions
    
    If U1 < L1 Then
        NormalizeArray = Array()
        Exit Function
    End If
    
    If U2 = -1 Then
        ReDim out(0 To U1 - L1)
        For i = 0 To UBound(out)
            out(i) = x(i + L1)
        Next
    Else
        ReDim out(0 To U2 - L2)
        For i = 0 To UBound(out)
            out(i) = x(L1, i + L2)
            ' we pick up the 1st line only
        Next
    End If
    
    NormalizeArray = out
End Function

Public Function StackToArray(pan As Variant) As Variant
    Dim out() As Variant
    Dim x As Variant
    Dim i As Long
    Dim Counter As Long
    
    x = Empty
    Counter = 0
    Do Until IsEmpty(pan)
        x = Array(pan(0), x)
        pan = pan(1)
        Counter = Counter + 1
    Loop
    
    If Counter = 0 Then
        StackToArray = Array()
        Exit Function
    End If
    
    ReDim out(0 To Counter - 1)
    i = 0
    Do Until IsEmpty(x)
        out(i) = x(0)
        x = x(1)
        i = i + 1
    Loop
    
    StackToArray = out
End Function


'=== helper functions end ===

'}}}

'code
'   name;BaumMain
'{{{
Option Explicit

' BaumMain addin for ToolBarV2

' using a excel worksheet as a property holder

' we do not support popup on excel sheet at this moment
' no ideas how to describe it wisely on 2 dimensional sheet

Private Helper As ToolBarV2
'Public Helper As ToolBarV2
' we cannot have a public variable in Excel Worksheet

Friend Function VBProjectName() As String
    ' VBProject.Name can't be accessed for the default settings.
    VBProjectName = "F3HeadFiles"
End Function

Friend Function GetHelper() As ToolBarV2
    Set GetHelper = Helper
End Function

'=== default main procedures begin ===


' this will called by pressing a button
Public Sub BarMain(Optional oWho As Object = Nothing)
    If Helper Is Nothing Then
        BarInitialize
        MsgBox "ツールバーを修復しました。もう一度操作してください。", vbExclamation, BaumMain.Name
    Else
        Helper.BarMain Me
    End If
End Sub

Public Sub OnButtonToggle()
    Helper.OnButtonToggle
End Sub

' followings need to be public, because they are called from outside by the Helper
' we also can copy the Helper.BarMain code here, and let the followings be private.

Public Sub Menu_head(oAC As Object)
    HeadFiles.Head Selection, _
        Val(Helper.GetControlText("bytes_show")), _
        Val(Helper.GetControlText("bytes_judge"))
End Sub

Public Sub Menu_bytes_show(oAC As Object)
    Helper.ComboAddHistory oAC, False
End Sub

Public Sub Menu_bytes_judge(oAC As Object)
    Helper.ComboAddHistory oAC, False
End Sub

Public Sub Menu_about(oAC As Object)
    If ThisWorkbook.IsAddin Then
        Dim Wb As Workbook
        Set Wb = Workbooks.Add
        Me.Copy Before:=Wb.Sheets(1)
        Wb.Saved = True
        Set Wb = Nothing
    Else
        Me.Activate
    End If
End Sub


'=== default main procedures end ===
'=== button data begin ===

Public Property Get ButtonData() As Variant
    ButtonData = ConvertRangeToArray(Application.Intersect(GetButtonRow, GetButtonCol))
End Property

Public Property Get ButtonParent() As Variant
    ButtonParent = Array(VBProjectName & "." & Me.CodeName)
End Property

' above simple property codes are supported by the following range helpers

Private Function GetButtonRow(Optional Address As String = "_ButtonCaption") As Range
    Dim out As Range
    Dim StartAt As Range
    
    Set StartAt = Me.Range(Address)
    If IsEmpty(StartAt.Offset(1, 0).Value) Then
        Set out = StartAt
    Else
        Set out = Me.Range(StartAt, StartAt.End(xlDown))
    End If
    
    Set GetButtonRow = out.EntireRow
End Function

Private Function GetButtonCol(Optional Address As String = "_ButtonCaption") As Range
    Dim StartAt As Range
    Set StartAt = Me.Range(Address)
    Set GetButtonCol = Me.Range(StartAt, StartAt.SpecialCells(xlCellTypeLastCell)).EntireColumn
End Function

Private Function ConvertRangeToArray(Ra As Range) As Variant
    Dim out() As Variant
    Dim i As Long
    
    ReDim out(0 To Ra.Rows.Count - 1)
    For i = 0 To UBound(out)
        out(i) = Ra.Rows(i + 1).Value
    Next
    
    ConvertRangeToArray = out
End Function


'=== button data end ===
'=== constructor / destructor begin ===


Private Function BarName() As String
    BarName = Me.Name & Me.Range("_PublicName").Text & Me.Range("_Timestamp").Text
End Function

Public Sub BarInitialize()
    Dim vMe As Variant
    Set vMe = Me
    Set Helper = New ToolBarV2
    Helper.SetName BarName
    Helper.NewBar vMe
End Sub

Public Sub BarTerminate()
    On Error Resume Next
    Helper.DelBar
    Set Helper = Nothing
End Sub


'=== constructor / destructor end ===

'}}}

'module
'   name;HeadFiles
'{{{
Option Explicit

Public Sub Head(Target As Object, BytesShow As Long, BytesJudge As Long)
    Const ShowAtRelative = "B1:F1"  ' 5 columns begining at the next right
    
    Dim Ws As Worksheet
    Dim ShowAt As Range
    Dim FileName As Range
    Dim FileNamesArea As Range
    Dim ReservedArea As Range
    Dim CurrentColumns As String
    Dim CurrentEndColumn As String
    Dim OutputColumns As String
    Dim TitleRow As Long
    
    If TypeName(Target) <> "Range" Then Exit Sub
    
    Set FileNamesArea = ExpandToRowDown(Target)
    Set ReservedArea = FileNamesArea.CurrentRegion
    Set Ws = ReservedArea.Worksheet
    TitleRow = ReservedArea.Cells(1).Row
    CurrentColumns = ReservedArea.EntireColumn.Address(False, False, xlA1, False)
    CurrentEndColumn = Split(CurrentColumns, ":")(1) & "1"  ' right edge
    OutputColumns = Ws.Range(CurrentEndColumn).Range(ShowAtRelative).EntireColumn.Address(False, False, xlA1, False)
    'Debug.Print CurrentColumns, OutputColumns, TitleRow
    
    ShowTitle Ws.Range(OutputColumns).Rows(TitleRow)
    For Each FileName In FileNamesArea.Cells
        If Not (FileName.EntireRow.Hidden Or FileName.EntireColumn.Hidden) Then     ' skip filtered hiddens
            Set ShowAt = FileName.EntireRow.Columns(OutputColumns)
            ShowHead FileName, ShowAt, BytesShow, BytesJudge
        End If
    Next
End Sub

Private Sub ShowTitle(ShowAt As Range)
    With ShowAt
        .Value = Array("text/binary", "bom", "linefeed", "charset", "head")
        .Interior.ColorIndex = 40
        .Font.Bold = True
        .HorizontalAlignment = XlHAlign.xlHAlignCenter
    End With
End Sub

Private Sub ShowHead(FileAt As Range, ShowAt As Range, BytesShow As Long, BytesJudge As Long)
    Dim HeadBytes As Variant
    Dim TextBinaryJisAscii As String
    Dim TextBinary As String
    Dim TheBom As String
    Dim LineFeed As String
    Dim Charset As String
    Dim PossibleCharset As String
    Dim Head As String
    
    HeadBytes = GetFileHead(FileAt.Value, Max(BytesShow, BytesJudge))
    If UBound(HeadBytes) = -1 Then Exit Sub
    
    TextBinaryJisAscii = TextOrBinary(HeadBytes)
    TheBom = HasBom(HeadBytes)
    
    If Left(TheBom, 1) = "F" Then
        Charset = "unicode"
    ElseIf Left(TheBom, 1) = "E" Then
        Charset = "utf-8"
    ElseIf TextBinaryJisAscii = "ascii" Then
        Charset = "ascii"
    ElseIf TextBinaryJisAscii = "jis" Then
        Charset = "iso-2022-jp"
    ElseIf TextBinaryJisAscii = "binary" Then
        Charset = vbNullString
        TextBinary = "binary"
    Else
        Charset = HasCharset(HeadBytes)
    End If
    
    If TextBinary = "binary" Then
        LineFeed = vbNullString
    Else
        TextBinary = "text"
        LineFeed = HasLineFeed(HeadBytes)
    End If
    
    If Charset = "" And TextBinary = "text" Then
        PossibleCharset = "shift_jis"   ' assume japanese ANSI as default
    Else
        PossibleCharset = Charset
    End If
    
    Head = CleanHead(HeadBytes, BytesShow, PossibleCharset)
    
    ShowAt.Value = Array(TextBinary, TheBom, LineFeed, Charset, Head)
End Sub

Private Function EscapeLineFeed(x As String) As String
    Const EscapeTo = "\n"
    EscapeLineFeed = Replace(Replace(Replace(x, vbCrLf, EscapeTo), vbLf, EscapeTo), vbCr, EscapeTo)
End Function

Private Function EncodedHead(Data As Variant, Length As Long, Charset As String) As String
    Dim Stream As ADODB.Stream
    Dim out As String
    
    Set Stream = New ADODB.Stream
    Stream.Open
    ' put binary data into stream
    Stream.Type = adTypeBinary
    Stream.Write Data
    ' pickup as encoded text from stream
    Stream.Position = 0
    Stream.Type = adTypeText
    Stream.Charset = Charset
    out = Stream.ReadText
    Stream.Close
    Set Stream = Nothing
    
    EncodedHead = EscapeLineFeed(Left(out, Length))
End Function

Private Function BinaryDumpWithAscii(Data As Variant, Length As Long) As String
    Dim out As String
    Dim i As Long
    
    out = ""
    For i = 0 To Length - 1
        Select Case Data(i)
        Case &H20 To &H7E   ' ascii
            out = out & ChrW(Data(i))
        Case Else
            out = out & "x" & Hex(Data(i))
        End Select
    Next
    
    BinaryDumpWithAscii = out
End Function

Private Function CleanHead(Data As Variant, ByVal Length As Long, Charset As String) As String
    If Length > UBound(Data) + 1 Then Length = UBound(Data) + 1
    If Charset = "" Then
        CleanHead = BinaryDumpWithAscii(Data, Length)
    Else
        CleanHead = EncodedHead(Data, Length, Charset)
    End If
End Function

Private Function ExtractCharset(Data As Variant, ByVal Cursor As Long) As String
    Dim Charset As String
    Dim EndCursor As Long
    
    Charset = ""
    EndCursor = UBound(Data)
    
    Do While Cursor <= EndCursor
        Select Case Data(Cursor)
        Case 45, 95     ' "-", "_"
        Case 48 To 57   ' "0" To "9"
        Case 65 To 90   ' "A" To "Z"
        Case 97 To 122  ' "a" To "z"
        Case Else
            Exit Do
        End Select
        Charset = Charset & LCase(ChrW(Data(Cursor)))
        Cursor = Cursor + 1
    Loop
    
    ExtractCharset = Charset
End Function

Private Function BinaryFound(Data As Variant, PositionBegin As Long, FindArray As Variant) As Boolean
    Dim i As Long
    Dim iEnd As Long
    Dim Cursor As Long
    Dim x As Variant
    Dim xx As Variant
    Dim ContinueMatching As Boolean
    
    For Each x In FindArray
        iEnd = UBound(x)
        
        For i = 0 To iEnd
            Cursor = PositionBegin - i
            If Cursor < 0 Then GoTo NotMatchThis
            
            ContinueMatching = False
            For Each xx In x(iEnd - i)
                'Debug.Print xx, Data(Cursor), i, iEnd, Cursor
                If xx = Data(Cursor) Then
                    If i = iEnd Then
                        BinaryFound = True
                        Exit Function
                    Else
                        ContinueMatching = True
                        Exit For
                    End If
                End If
            Next
            If Not ContinueMatching Then GoTo NotMatchThis
        Next
        
NotMatchThis:
    Next
    
    BinaryFound = False
End Function

Private Function HasCharset(Data As Variant) As String
    ' expects followings,
    ' <?xml version="1.0" encoding="Shift_JIS"?>
    ' <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    Dim i As Long
    Dim Keywords As Variant
    
    ' Array("encoding","charset"), lower and upper cases
    Keywords = Array( _
        Array(Array(101, 69), Array(110, 78), Array(99, 67), Array(111, 79), Array(100, 68), Array(105, 73), Array(110, 78), Array(103, 71)), _
        Array(Array(99, 67), Array(104, 72), Array(97, 65), Array(114, 82), Array(115, 83), Array(101, 69), Array(116, 84)) _
        )
    
    For i = 1 To UBound(Data) - 1
        If Data(i) <> 61 Then GoTo NotMatch     ' =
        If Not BinaryFound(Data, i - 1, Keywords) Then GoTo NotMatch
        'Debug.Print "found at " & i
        ' no back to the loop again
        If Data(i + 1) = 34 Then i = i + 1      ' "
        HasCharset = ExtractCharset(Data, i + 1)
        Exit Function
NotMatch:
    Next
    
    HasCharset = ""
End Function

#If False Then
Public Sub MakeArray()
    Dim out As String
    Dim s As String
    Dim i As Long
    
    's = "encoding"
    s = "charset"
    
    out = "Array("
    For i = 1 To Len(s)
        out = out & "Array("
        out = out & Asc(Mid(s, i, 1)) & ","
        out = out & Asc(UCase(Mid(s, i, 1))) & "),"
    Next
    
    Debug.Print out
End Sub
#End If

Private Function HasLineFeed(Data As Variant) As String
    Dim x As Variant
    Dim out As String
    
    out = ""
    For Each x In Data
        Select Case x
        Case &HA    ' Lf
            If out = "Lf" Then GoTo DONE
            out = out & "Lf"
        Case &HD    ' Cr
            If out = "Cr" Then GoTo DONE
            out = out & "Cr"
        Case Else
            If out <> "" Then GoTo DONE
        End Select
        If out = "CrLf" Then GoTo DONE
    Next
    
DONE:
    HasLineFeed = out
End Function

Private Function HasBom(Data As Variant) As String
    HasBom = ""
    
    ' detect unicode
    If UBound(Data) < 1 Then Exit Function
    If Data(0) = &HFF And Data(1) = &HFE Then
        HasBom = "FFFE"
        Exit Function
    ElseIf Data(1) = &HFF And Data(0) = &HFE Then
        HasBom = "FEFF"
        Exit Function
    End If
    
    ' detect utf-8
    If UBound(Data) < 2 Then Exit Function
    If Data(0) <> &HEF Then Exit Function
    If Data(1) <> &HBB Then Exit Function
    If Data(2) <> &HBF Then Exit Function
    HasBom = "EFBBBF"
End Function

Private Function TextOrBinary(Data As Variant) As String
    Dim x As Variant
    Dim out As String
    
    out = "ascii"
    For Each x In Data
        Select Case x
        Case Is > &H7E      ' ~
            ' possible multi-bytes
            ' we check only control characters
            out = "text"
        Case &H9, &HA, &HD  ' Tab, Lf, Cr
            ' printables
        Case &H1B           ' Esc
            ' possible jis text
            out = "jis"
        Case Is < &H20  ' space
            out = "binary"
            GoTo DONE
        End Select
    Next
    
DONE:
    TextOrBinary = out
End Function

Private Function GetFileHead(FileName As String, ByVal Length As Long) As Variant
    Dim bss() As Byte
    
    On Error GoTo FileError
    
    Open FileName For Binary Access Read As #1
    If Length > LOF(1) Then Length = LOF(1)
    ReDim bss(0 To Length - 1)
    Get #1, , bss
    Close #1
    
    GetFileHead = bss
    Exit Function
    
FileError:
    Debug.Print FileName, Err.Number, Err.Description
    Close #1
    GetFileHead = Array()
End Function

Private Function Max(x As Variant, y As Variant) As Variant
    If x > y Then
        Max = x
    Else
        Max = y
    End If
End Function

Private Function ExpandToRowDown(Target As Range, Optional ExpandSelection As Boolean = True) As Range
    Dim Expanded As Range
    
    If IsASingleCell(Target) Then
        If IsEmpty(Target.Cells(2, 1).Value) Then
            Set Expanded = Target
        Else
            Set Expanded = Target.Worksheet.Range(Target, Target.End(xlDown))
            If ExpandSelection Then Expanded.Select
        End If
    Else
        Set Expanded = Target
    End If
    
    Set ExpandToRowDown = Expanded
End Function

' this function is required to avoid overflow errors on excel 2007 Cells.Count
Private Function IsASingleCell(Target As Range) As Boolean
    On Error GoTo MayFailOnExcel2007
    
    IsASingleCell = (Target.Cells.Count = 1)
    Exit Function
    
MayFailOnExcel2007:
    If Err.Number = 6 Then
        ' overflowed, means very large, larger than 1, maybe
        IsASingleCell = False
        Exit Function
    Else
        Err.Raise Err.Number
    End If
End Function

'}}}

'code
'   name;ThisWorkbook
'{{{
Option Explicit

Private Sub Workbook_Open()
    BaumMain.BarInitialize
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    BaumMain.BarTerminate
End Sub

'}}}

'ssf-end

