'workbook
'  name;validate_char_zenkaku.xls

'require
'  ;{3F4DACA7-160D-11D2-A8E9-00104B365C9F} 5 5 Microsoft VBScript Regular Expressions 5.5

'worksheet
'  name;validate_char_zenkaku/BaumMain

'cells-formula
'  address;A1:M16
'         ;名称
'         ;validate_char_zenkaku
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;コメント
'         ;選択したセルに半角文字が入っていないことを確認する
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;comment
'         ;validate cells selected not to contain hankaku characters
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;著作権
'         ;="Copyright (C) " &R[3]C & "-" & YEAR(R[5]C) & " " & R[2]C
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;ライセンス
'         ;自律, 自由, 公正, http://cowares.nobody.jp
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;作者
'         ;Tomizono - kobobau.com
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;初版
'         ;2011
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;配布元
'         ;http://cowares.blogspot.com/search/label/baum
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;更新
'         ;40602.7698842593
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;keyword
'         ;excel,validation
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;ボタンの表示
'         ;ボタンの機能
'         ;Tag
'         ;Parameter
'         ;ControlType
'         ;Style
'         ;Width
'         ;Group
'         ;Action
'         ;Initialize ..
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;検証
'         ;選択したセルを検証する
'         ;validate
'         ;
'         ;1
'         ;2
'         ;
'         ;1
'         ;
'         ;
'         ;
'         ;
'         ;
'         ;結果
'         ;検証結果のサマリー
'         ;summary
'         ;
'         ;3
'         ;
'         ;
'         ;1
'         ;
'         ;
'         ;
'         ;
'         ;

'cells-numberformat
'  address;A1:M16
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;m/d/yyyy h:mm
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General
'         ;General

'cells-name
'  ;=validate_char_zenkaku!R15C1
'  ;validate_char_zenkaku!_ButtonCaption
'  ;=validate_char_zenkaku!R3C2
'  ;validate_char_zenkaku!_Comment
'  ;=validate_char_zenkaku!R6C2
'  ;validate_char_zenkaku!_Contributor
'  ;=validate_char_zenkaku!R4C2
'  ;validate_char_zenkaku!_Copyright
'  ;=validate_char_zenkaku!R5C2
'  ;validate_char_zenkaku!_License
'  ;=validate_char_zenkaku!R2C2
'  ;validate_char_zenkaku!_LocalComment
'  ;=validate_char_zenkaku!R1C2
'  ;validate_char_zenkaku!_PublicName
'  ;=validate_char_zenkaku!R7C2
'  ;validate_char_zenkaku!_Since
'  ;=validate_char_zenkaku!R10C2
'  ;validate_char_zenkaku!_Tag
'  ;=validate_char_zenkaku!R9C2
'  ;validate_char_zenkaku!_Timestamp
'  ;=validate_char_zenkaku!R8C2
'  ;validate_char_zenkaku!_Url

'class
'  name;ToolBarV2
'{{{
Option Explicit

' Generate an application toolbar

Private MyBar As Office.CommandBar
Private MyName As String
Private MyApp As Application


'=== main procedures helper begin ===


' this will called by pressing a button
Friend Sub BarMain(Optional oWho As Object = Nothing)
    Dim oAC As Object   ' this is the button itself pressed
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    ' switch to a main menu procedure
    Main oAC, SomebodyOrMe(oWho)
    Set oAC = Nothing
End Sub

' main menu procedure. if you delete this, a public Main in Standard Module will be called, maybe.
Private Sub Main(oAC As Object, Optional oWho As Object = Nothing)
    ' use a button tag to switch a procedure to be called as "Menu_xx"
    CallByName SomebodyOrMe(oWho), "Menu_" & oAC.Tag, VbMethod, oAC
End Sub

Public Sub Menu_about(oAC As Object)
    MsgBox TypeName(Me), vbOKOnly, "Sample of procedure called by the Main"
End Sub

Friend Sub OnButtonToggle()
    Dim oAC As Object   ' toggle this button
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    
    ButtonSwitchToggle oAC
    Set oAC = Nothing
End Sub

Private Function SomebodyOrMe(oWho As Object) As Object
    If oWho Is Nothing Then
        Set SomebodyOrMe = Me
    Else
        Set SomebodyOrMe = oWho
    End If
End Function


'=== main procedures helper end ===
'=== event procedures begin ===


Private Sub Class_Initialize()
    Set MyApp = Application
    MyName = CStr(Timer)    ' random name, maybe uniq
End Sub

Private Sub Class_Terminate()
    Set MyApp = Nothing
End Sub


'=== event procedures end ===
'=== construction and destruction begin ===


Public Sub NewBar(ParamArray Addins() As Variant)
    DelBar
    Set MyBar = CreateBar(MyApp, MyName)
    AddAddins MyBar, CVar(Addins)
    ShowBar MyBar
End Sub

Public Sub DelBar()
    DeleteBar MyBar
    Set MyBar = Nothing
End Sub

Public Sub SetApplication(oApp As Application)
    Set MyApp = oApp
End Sub

Public Sub SetName(NewName As String)
    MyName = NewName
End Sub

Public Property Get Bar() As Office.CommandBar
    Set Bar = MyBar
End Property


'=== construction and destruction end ===
'=== bar generator begin ===


Public Function CreateBar(oApp As Application, BarName As String) As Office.CommandBar
    RemoveExistingBar oApp, BarName
    Set CreateBar = oApp.CommandBars.Add(Name:=BarName, Temporary:=True)
End Function

Public Sub RemoveExistingBar(oApp As Application, BarName As String)
    On Error Resume Next
    oApp.CommandBars(BarName).Delete
End Sub

Public Sub DeleteBar(Bar As Object)
    On Error Resume Next
    Bar.Delete
End Sub

Public Sub ShowBar(Bar As Object, Optional Position As Long = msoBarTop, Optional Height As Long = 0)
    Bar.Visible = True
    Bar.Position = Position
    If Height > 0 Then Bar.Height = Bar.Height * Height
End Sub


'=== bar generator end ===
'=== handle addins begin ===


Public Function WithAddins(ParamArray Addins() As Variant) As Long
    WithAddins = AddAddins(MyBar, CVar(Addins))
End Function

Public Function AddAddins(Bar As Object, Addins As Variant) As Long
    Dim Addin As Variant
    Dim LastButtonIndex As Long
    
    For Each Addin In Addins
        LastButtonIndex = AddButtons(Bar, Addin.ButtonData, Addin.ButtonParent)
    Next
    
    AddAddins = LastButtonIndex
End Function


'=== handle addins end ===
'=== button generator begin ===


Public Function AddButtons(Bar As Object, Data As Variant, Parent As Variant) As Long
    Dim LastButtonIndex As Long
    Dim SingleData As Variant
    
    For Each SingleData In Data
        LastButtonIndex = Add(Bar, MakeAButtonData(SingleData, Parent))
    Next
    
    AddButtons = LastButtonIndex
End Function

Public Function Add(Bar As Object, Data As Variant) As Long
    Dim ButtonA As CommandBarControl
    
    Set ButtonA = Bar.Controls.Add(Type:=ButtonControlType(Data), Temporary:=True)
    With ButtonA
        Select Case ButtonControlType(Data)
        Case msoControlEdit                         '2      ' textbox
        Case msoControlDropdown, msoControlComboBox '3, 4   ' list and combo
            SetButtonItems ButtonA, Data
            SetButtonStyle ButtonA, Data
        Case msoControlPopup                        '10     ' popup
            SetButtonPopup ButtonA, Data
        Case msoControlButton                       '1      ' Button
            SetButtonStyle ButtonA, Data
            SetButtonState ButtonA, Data
        End Select
        SetButtonWidth ButtonA, Data
        SetButtonGroup ButtonA, Data
        .OnAction = ButtonAction(Data)
        .Caption = ButtonCaption(Data)
        .TooltipText = ButtonDescription(Data)
        .Tag = ButtonTag(Data)
        .Parameter = ButtonParameter(Data)
    End With
    
    Add = ButtonA.Index
    Set ButtonA = Nothing
End Function

Public Sub Remove(Bar As Object, Items As Variant)
    On Error Resume Next
    Dim Item As Variant
    
    If IsArray(Item) Then
        For Each Item In Items
            Remove Bar, Item
        Next
    Else
        Bar.Controls(Item).Delete
    End If
End Sub


'=== button generator end ===
'=== button data structure begin ===


' generator / selector

' Data(): Array of button data
' Parent(): Array of button parent information (bar and properties)
'           Parent(0) is reserved for addin key


Public Function MakeAButtonData(Data As Variant, Parent As Variant) As Variant
    MakeAButtonData = Array(NormalizeArray(Data), Parent)
End Function

Public Function DataAButtonData(AButtonData As Variant) As Variant
    On Error Resume Next
    DataAButtonData = AButtonData(0)
End Function

Public Function ParentAButtonData(AButtonData As Variant) As Variant
    On Error Resume Next
    ParentAButtonData = AButtonData(1)
End Function

Public Function KeyAButtonData(AButtonData As Variant) As String
    On Error Resume Next
    KeyAButtonData = ParentAButtonData(AButtonData)(0)
End Function

Public Function ItemAButtonData(AButtonData As Variant, ByVal Item As Long, _
            Optional FallBack As Variant = Empty) As Variant
    On Error Resume Next
    Dim out As Variant
    
    out = DataAButtonData(AButtonData)(Item)
    If IsEmpty(out) Then out = FallBack
    
    ItemAButtonData = out
End Function


'=== button data structure end ===
'=== button data struncture detail begin ===


Public Function ButtonCaption(Data As Variant) As String
    ButtonCaption = ItemAButtonData(Data, 0)
End Function

Public Function ButtonDescription(Data As Variant) As String
    ButtonDescription = ItemAButtonData(Data, 1)
End Function

Public Function ButtonTag(Data As Variant) As String
    ButtonTag = ItemAButtonData(Data, 2, ButtonCaption(Data))
End Function

Public Function ButtonParameter(Data As Variant) As String
    ButtonParameter = ItemAButtonData(Data, 3)
End Function

Public Function ButtonControlType(Data As Variant) As Long
    'MsoControlType
    On Error Resume Next
    ButtonControlType = Val(ItemAButtonData(Data, 4, msoControlButton))
End Function

Public Function ButtonStyle(Data As Variant) As Long
    'MsoButtonStyle
    On Error Resume Next
    ButtonStyle = Val(ItemAButtonData(Data, 5, msoButtonCaption))
End Function

Public Function ButtonWidth(Data As Variant) As Long
    ' we use 45 units here
    On Error Resume Next
    Const UnitWidth = 45
    ButtonWidth = Val(ItemAButtonData(Data, 6)) * UnitWidth
End Function

Public Function ButtonGroup(Data As Variant) As Boolean
    ' put group line on its left
    ButtonGroup = Not IsEmpty(ItemAButtonData(Data, 7))
End Function

Public Function ButtonAction(Data As Variant) As String
    On Error Resume Next
    ' Standard Method Name to be kicked with the button
    Const BarMain = "BarMain"
    Dim FullName As String
    
    If KeyAButtonData(Data) = "" Then
        FullName = BarMain
    Else
        FullName = KeyAButtonData(Data) & "." & BarMain
    End If
    
    ButtonAction = ItemAButtonData(Data, 8, FullName)
End Function

Public Function ButtonItems(Data As Variant) As Variant
    Dim Pan As Variant
    Dim i As Long
    
    On Error GoTo Done
    Pan = Empty
    i = 9
    
    Do Until IsEmpty(ItemAButtonData(Data, i))
        Pan = Array(ItemAButtonData(Data, i), Pan)
        i = i + 1
    Loop
    
Done:
    ButtonItems = Pan
End Function


'=== button data struncture detail end ===
'=== button tools for data begin ===


Public Sub SetButtonWidth(ButtonA As CommandBarControl, Data As Variant)
    If ButtonWidth(Data) > 0 Then ButtonA.Width = ButtonWidth(Data)
End Sub

Public Sub SetButtonStyle(ButtonA As Object, Data As Variant)
    On Error Resume Next
    ' Each Button does not accept each style, but we won't check them.
    If ButtonStyle(Data) <> 0 Then ButtonA.Style = ButtonStyle(Data)
End Sub

Public Sub SetButtonGroup(ButtonA As CommandBarControl, Data As Variant)
    If ButtonGroup(Data) Then ButtonA.BeginGroup = True
End Sub

Public Sub SetButtonItems(ButtonA As Object, Data As Variant)
    Dim Pan As Variant
    Dim HasItem As Boolean
    
    Pan = ButtonItems(Data)
    HasItem = False
    
    Do Until IsEmpty(Pan)
        ButtonA.AddItem Pan(0), 1
        Pan = Pan(1)
        HasItem = True
    Loop
    If HasItem Then ButtonA.ListIndex = 1
End Sub

Public Sub SetButtonPopup(ButtonA As CommandBarControl, Data As Variant)
    Dim MyChild As Variant
    
    MyChild = StackToArray(ButtonItems(Data))
    If UBound(MyChild) >= 0 Then Add ButtonA, MyChild
End Sub

Public Sub SetButtonState(ButtonA As Object, Data As Variant)
    If Not IsEmpty(ButtonItems(Data)) Then ButtonA.State = msoButtonDown
End Sub


'=== button tools for data end ===
'=== button tools for control object begin ===


Public Sub ComboAddHistory(oAC As Object, Optional AtBottom As Boolean = False)
    If oAC.ListIndex > 0 Then Exit Sub
    
    If AtBottom Then
        oAC.AddItem oAC.Text
        oAC.ListIndex = oAC.ListCount
    Else
        oAC.AddItem oAC.Text, 1
        oAC.ListIndex = 1
    End If
End Sub

Public Sub ListAddHistory(oAC As Object, Text As String, Optional AtBottom As Boolean = False)
    If AtBottom Then
        oAC.AddItem Text
        oAC.ListIndex = oAC.ListCount
    Else
        oAC.AddItem Text, 1
        oAC.ListIndex = 1
    End If
End Sub

Public Function ListFindIndex(oAC As Object, Text As String) As Long
    Dim i As Long
    For i = 1 To oAC.ListCount
        If oAC.List(i) = Text Then
            ListFindIndex = i
            Exit Function
        End If
    Next
    ListFindIndex = 0
End Function

Public Function ControlText(oAC As Object) As String
    ControlText = oAC.Text
End Function

Public Sub ButtonSwitchOn(oAC As Object)
    oAC.State = msoButtonDown
End Sub

Public Sub ButtonSwitchOff(oAC As Object)
    oAC.State = msoButtonUp
End Sub

Public Function ButtonSwitchToggle(oAC As Object) As Boolean
    ButtonSwitchToggle = (Not IsButtonStateOn(oAC))
    If ButtonSwitchToggle Then
        ButtonSwitchOn oAC
    Else
        ButtonSwitchOff oAC
    End If
End Function

Public Function IsButtonStateOn(oAC As Object) As Boolean
    IsButtonStateOn = (oAC.State = msoButtonDown)
End Function

Public Function ButtonFindByTag(oAC As Object, Tag As Variant) As CommandBarControl
    If oAC Is Nothing Then Exit Function
    If TypeName(oAC) = "CommandBar" Then
        Set ButtonFindByTag = oAC.FindControl(Tag:=Tag)
    Else
        Set ButtonFindByTag = oAC.Parent.FindControl(Tag:=Tag)
    End If
End Function


'=== button tools for control object end ===
'=== button tools for mybar begin ===


Public Function GetButton(TagOrIndex As Variant) As Office.CommandBarControl
    On Error Resume Next
    Select Case TypeName(TagOrIndex)
    Case "Long", "Integer", "Byte", "Double", "Single"
        Set GetButton = MyBar.Controls(TagOrIndex)
    Case Else
        Set GetButton = ButtonFindByTag(MyBar, TagOrIndex)
    End Select
End Function

Public Function GetControlText(TagOrIndex As Variant) As String
    Dim out As String
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    Select Case oAC.Type
    Case msoControlEdit, msoControlDropdown, msoControlComboBox
        out = oAC.Text
    Case Else   ' msoControlButton, msoControlPopup
        out = oAC.Caption
    End Select
    
    Set oAC = Nothing
    GetControlText = out
End Function

Public Function SetControlText(TagOrIndex As Variant, ByVal Text As String) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    Dim Index As Long
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then
        out = False
    Else
        Select Case oAC.Type
        Case msoControlEdit
            oAC.Text = Text
        Case msoControlDropdown
            Index = ListFindIndex(oAC, Text)
            If Index = 0 Then
                ListAddHistory oAC, Text
            Else
                oAC.ListIndex = Index
            End If
        Case msoControlComboBox
            Index = ListFindIndex(oAC, Text)
            If Index = 0 Then
                oAC.Text = Text
                ComboAddHistory oAC
            Else
                oAC.ListIndex = Index
            End If
        Case Else
            oAC.Caption = Text
        End Select
        Set oAC = Nothing
        out = True
    End If
    
    SetControlText = out
End Function

Public Function GetControlState(TagOrIndex As Variant) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Type = msoControlButton Then
        ' return True when the button is pushed down
        out = IsButtonStateOn(oAC)
    End If
    
    Set oAC = Nothing
    GetControlState = out
End Function

Public Function SetControlState(TagOrIndex As Variant, ByVal State As Boolean) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Type = msoControlButton Then
        If IsButtonStateOn(oAC) <> State Then
            If State Then
                ButtonSwitchOn oAC
            Else
                ButtonSwitchOff oAC
            End If
            ' return True when the status is strictly changed
            out = True
        End If
    End If
    
    Set oAC = Nothing
    SetControlState = out
End Function

Public Function GetControlVisible(TagOrIndex As Variant) As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    GetControlVisible = oAC.Visible
End Function

Public Function SetControlVisible(TagOrIndex As Variant, ByVal Visible As Boolean) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Visible <> Visible Then
        oAC.Visible = Visible
        ' return True when the visible is strictly changed
        out = True
    End If
    
    SetControlVisible = out
End Function

Public Function IncControlWidth(TagOrIndex As Variant, ByVal Width As Long) As Long
    Dim out As Long
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    On Error Resume Next
    oAC.Width = oAC.Width + Width
    ' return the width accepted (tips: setting 0 to width makes it becomes default)
    out = oAC.Width
    
    IncControlWidth = out
End Function


'=== button tools for mybar end ===
'=== helper functions begin ===


Public Function NormalizeArray(x As Variant) As Variant
    On Error Resume Next
    Dim out() As Variant
    Dim i As Long
    Dim L1 As Long
    Dim L2 As Long
    Dim U1 As Long
    Dim U2 As Long
    
    L1 = 0
    L2 = 0
    U1 = -1
    U2 = -1
    
    L1 = LBound(x)
    L2 = LBound(x, 2)   ' error unless 2 dimensions
    U1 = UBound(x)
    U2 = UBound(x, 2)   ' error unless 2 dimensions
    
    If U1 < L1 Then
        NormalizeArray = Array()
        Exit Function
    End If
    
    If U2 = -1 Then
        ReDim out(0 To U1 - L1)
        For i = 0 To UBound(out)
            out(i) = x(i + L1)
        Next
    Else
        ReDim out(0 To U2 - L2)
        For i = 0 To UBound(out)
            out(i) = x(L1, i + L2)
            ' we pick up the 1st line only
        Next
    End If
    
    NormalizeArray = out
End Function

Public Function StackToArray(Pan As Variant) As Variant
    Dim out() As Variant
    Dim x As Variant
    Dim i As Long
    Dim Counter As Long
    
    x = Empty
    Counter = 0
    Do Until IsEmpty(Pan)
        x = Array(Pan(0), x)
        Pan = Pan(1)
        Counter = Counter + 1
    Loop
    
    If Counter = 0 Then
        StackToArray = Array()
        Exit Function
    End If
    
    ReDim out(0 To Counter - 1)
    i = 0
    Do Until IsEmpty(x)
        out(i) = x(0)
        x = x(1)
        i = i + 1
    Loop
    
    StackToArray = out
End Function


'=== helper functions end ===
'}}}

'code
'  name;BaumMain
'{{{
Option Explicit

' BaumMain addin for ToolBarV2

' using a excel worksheet as a property holder

' we do not support popup on excel sheet at this moment
' no ideas how to describe it wisely on 2 dimensional sheet

Private Helper As ToolBarV2
'Public Helper As ToolBarV2
' we cannot have a public variable in Excel Worksheet

Friend Function GetHelper() As ToolBarV2
    Set GetHelper = Helper
End Function

'=== default main procedures begin ===


' this will called by pressing a button
Public Sub BarMain(Optional oWho As Object = Nothing)
    If Helper Is Nothing Then
        BarInitialize
        MsgBox "ツールバーを修復しました。もう一度操作してください。", vbExclamation, BaumMain.Name
    Else
        Helper.BarMain Me
    End If
End Sub

Public Sub OnButtonToggle()
    Helper.OnButtonToggle
End Sub

' followings need to be public, because they are called from outside by the Helper
' we also can copy the Helper.BarMain code here, and let the followings be private.

Public Sub Menu_validate(oAC As Object)
    ValidateCharZenkaku.DoValidate Selection, Helper.GetButton("summary"), Helper
End Sub

Public Sub Menu_summary(oAC As Object)
    ValidateCharZenkaku.JumpTo oAC
End Sub


'=== default main procedures end ===
'=== button data begin ===

Public Property Get ButtonData() As Variant
    ButtonData = ConvertRangeToArray(Application.Intersect(GetButtonRow, GetButtonCol))
End Property

Public Property Get ButtonParent() As Variant
    ButtonParent = Array(Me.CodeName)
End Property

' above simple property codes are supported by the following range helpers

Private Function GetButtonRow(Optional Address As String = "_ButtonCaption") As Range
    Dim out As Range
    Dim StartAt As Range
    
    Set StartAt = Me.Range(Address)
    If IsEmpty(StartAt.Offset(1, 0).Value) Then
        Set out = StartAt
    Else
        Set out = Me.Range(StartAt, StartAt.End(xlDown))
    End If
    
    Set GetButtonRow = out.EntireRow
End Function

Private Function GetButtonCol(Optional Address As String = "_ButtonCaption") As Range
    Dim StartAt As Range
    Set StartAt = Me.Range(Address)
    Set GetButtonCol = Me.Range(StartAt, StartAt.SpecialCells(xlCellTypeLastCell)).EntireColumn
End Function

Private Function ConvertRangeToArray(Ra As Range) As Variant
    Dim out() As Variant
    Dim i As Long
    
    ReDim out(0 To Ra.Rows.Count - 1)
    For i = 0 To UBound(out)
        out(i) = Ra.Rows(i + 1).Value
    Next
    
    ConvertRangeToArray = out
End Function


'=== button data end ===
'=== constructor / destructor begin ===


Private Function BarName() As String
    BarName = Me.Name & Me.Range("_PublicName").Text & Me.Range("_Timestamp").Text
End Function

Public Sub BarInitialize()
    Dim vMe As Variant
    Set vMe = Me
    Set Helper = New ToolBarV2
    Helper.SetName BarName
    Helper.NewBar vMe
End Sub

Public Sub BarTerminate()
    On Error Resume Next
    Helper.DelBar
    Set Helper = Nothing
End Sub


'=== constructor / destructor end ===
'}}}

'module
'  name;ValidateCharZenkaku
'{{{
Option Explicit

Public Sub DoValidate(Target As Object, Summary As Object, Helper As ToolBarV2)
    Const HankakuColor = 3
    Const ZenkakuAlphaColor = 10
    Const AlarmCellColor = 6
    Const NormalColor = xlAutomatic
    Const NormalCellColor = xlColorIndexNone
    
    Summary.Clear
    If TypeName(Target) <> "Range" Then Exit Sub
    
    Dim TaRa As Range
    Dim ACe As Range
    Dim AceText As String
    Dim Rhan As RegExp
    Dim Rzenan As RegExp
    Dim Rspace As RegExp
    Dim Matched As MatchCollection
    Dim AM As Match
    Dim Pan As Variant
    
    Pan = Empty
    Set TaRa = Application.Intersect(Target, Target.Worksheet.UsedRange)
    If TaRa Is Nothing Then GoTo Done
    
    Set Rhan = RegHankaku
    Set Rzenan = RegZenkakuAlphaNum
    Set Rspace = RegSpaces
    
    TaRa.Characters.Font.Underline = xlUnderlineStyleNone
    TaRa.Characters.Font.ColorIndex = NormalColor
    TaRa.Interior.ColorIndex = NormalCellColor
    
    For Each ACe In TaRa.Cells
        If ACe.HasFormula Then GoTo Skip
        If TypeName(ACe.Value) <> "String" Then GoTo Skip
        AceText = ACe.Value
        
        If Rzenan.Test(AceText) Then
            Set Matched = Rzenan.Execute(AceText)
            For Each AM In Matched
                ACe.Characters(AM.FirstIndex + 1, AM.Length).Font.ColorIndex = ZenkakuAlphaColor
            Next
        End If
        
        If Rhan.Test(AceText) Then
            ' now the cell is invalid
            Pan = Array(ACe.Address(False, False, xlA1, False), Pan)
            ACe.Interior.ColorIndex = AlarmCellColor
            Set Matched = Rhan.Execute(AceText)
            For Each AM In Matched
                ACe.Characters(AM.FirstIndex + 1, AM.Length).Font.ColorIndex = HankakuColor
                If Rspace.Test(AM.Value) Then
                    ACe.Characters(AM.FirstIndex + 1, AM.Length).Font.Underline = xlUnderlineStyleSingle
                End If
            Next
        End If
Skip:
    Next
    
    Set TaRa = Nothing
    Set AM = Nothing
    Set Matched = Nothing
    Set Rspace = Nothing
    Set Rzenan = Nothing
    Set Rhan = Nothing

Done:
    GenerateSummary Pan, Summary, Helper
End Sub

Private Sub GenerateSummary(Pan As Variant, Summary As Object, Helper As ToolBarV2)
    Dim Counter As Long
    
    If IsEmpty(Pan) Then
        ' validated as good!
        Helper.ListAddHistory Summary, "○"
        Exit Sub
    End If
    
    ' validation failed
    Counter = 0
    Do Until IsEmpty(Pan)
        Summary.AddItem Pan(0), 1
        Pan = Pan(1)
        Counter = Counter + 1
    Loop
    Helper.ListAddHistory Summary, Counter & " !"
End Sub

Public Sub JumpTo(Button As Object)
    If Button.ListIndex <= 1 Then Exit Sub
    
    Application.Goto Range(Button.Text), False
End Sub

Private Function RegHankaku() As RegExp
    Dim R As RegExp
    Set R = New RegExp
    R.Global = True
    R.IgnoreCase = False
    R.MultiLine = True
    'R.Pattern = "[!-~｡-ﾟ]+"    ' excludes ascii space(x20)
    R.Pattern = "[ -~｡-ﾟ]+"     ' includes ascii space(x20)
    Set RegHankaku = R
End Function

Private Function RegZenkakuAlphaNum() As RegExp
    Dim R As RegExp
    Set R = New RegExp
    R.Global = True
    R.IgnoreCase = False
    R.MultiLine = True
    R.Pattern = "[！-〜]+"
    Set RegZenkakuAlphaNum = R
End Function

Private Function RegSpaces() As RegExp
    Dim R As RegExp
    Set R = New RegExp
    R.Global = True
    R.IgnoreCase = False
    R.MultiLine = True
    R.Pattern = " +"
    Set RegSpaces = R
End Function
'}}}

'code
'  name;ThisWorkbook
'{{{
Option Explicit

Private Sub Workbook_Open()
    BaumMain.BarInitialize
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    BaumMain.BarTerminate
End Sub
'}}}


